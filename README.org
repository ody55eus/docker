#+TITLE: Docker Files

This repository contains all my public Dockerfiles.
Each folder represents a different project.

* Table of Contents :TOC:
- [[#emacs-latest][Emacs-latest]]
  - [[#dockerfile][Dockerfile]]
  - [[#gitlab-cicd][GitLab CI/CD]]
  - [[#github-actions][GitHub Actions]]
- [[#emacs-straight][Emacs-Straight]]
  - [[#straightel][Straight.el]]
  - [[#dockerfile-1][Dockerfile]]
  - [[#gitlab-cicd-1][GitLab CI/CD]]
  - [[#github-actions-1][GitHub Actions]]
- [[#publish][Publish]]
  - [[#plantuml][PlantUML]]
  - [[#dockerfile-2][Dockerfile]]
  - [[#gitlab-cicd-2][GitLab CI/CD]]
  - [[#github-actions-2][GitHub Actions]]
- [[#ana][Ana]]
  - [[#alpine-linux][Alpine Linux]]
  - [[#python-39--debian-bullseye-110][Python 3.9 / Debian Bullseye (11.0)]]
- [[#evaluate][Evaluate]]
- [[#flowers][Flowers]]
  - [[#dockerfile-3][Dockerfile]]
  - [[#github-actions-3][Github Actions]]
- [[#trajectory-recognition][Trajectory-Recognition]]
- [[#license][License]]

* Emacs-latest
Installs the latest version of Emacs from git source.
** Dockerfile
#+begin_src dockerfile :tangle emacs-latest/Dockerfile :mkdirp yes
# IMAGE: docker build . -t ody55eus/emacs-latest:latest
FROM debian:latest
MAINTAINER Jonathan Pieper <jpieper@mailbox.org>

RUN echo "deb-src http://deb.debian.org/debian bullseye main" >> /etc/apt/sources.list
RUN apt update --fix-missing && apt upgrade -y && apt install -y \
    curl git make nodejs default-jre python3-pip \
    texlive-science texlive-latex-extra texlive-publishers \
    dvipng man-db cm-super graphviz && \
    apt-get build-dep emacs -y && \
    apt-get --purge remove -y .\*-doc$ && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Download and install latest emacs
RUN git clone https://git.savannah.gnu.org/git/emacs.git
RUN cd emacs && ./autogen.sh && ./configure && \
    make && make install

WORKDIR /root
#+end_src

** GitLab CI/CD

#+begin_src yaml :tangle ./.gitlab-ci.yml :exports none
image: docker:stable
services:
- docker:dind
stages:
- emacs
- publish
variables:
  DOCKER_PLATFORMS: linux/amd64,linux/arm64/v8
variables:
  # Use TLS https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#tls-enabled
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: "/certs"
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#+end_src

#+begin_src yaml :tangle ./.gitlab-ci.yml
img-emacs-latest:
  stage: emacs
  variables:
    CI_REGISTRY_IMAGE: ody55eus/emacs-latest
    CI_PATH: emacs-latest
  script:
    - docker build -t $CI_REGISTRY_IMAGE $CI_PATH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  resource_group: group-emacs
#+end_src

** GitHub Actions
This section in the [[file:.github/workflows/dockerimage.yaml][GitHub Actions YAML-Configuration]] asks GitHub to create and push the new docker container on every commit:
#+begin_src yaml :tangle .github/workflows/dockerimage.yaml :exports none
name: Build Docker images
on:
  push:
    branches: [ main ]
jobs:
#+end_src

#+begin_src yaml :tangle .github/workflows/dockerimage.yaml :noweb yes
  build-emacs-latest:

    runs-on: ubuntu-latest

    steps:

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Build the emacs-latest Docker image
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: emacs-latest/Dockerfile
          push: true
          tags: ody55eus/emacs-latest:latest
#+end_src

* Emacs-Straight
Builds on [[*Publish][Publish]] and installs the package manager straight.el.
** Straight.el
There's a [[https://systemcrafters.cc/advanced-package-management/using-straight-el/][System Crafters project]] about installation and usage of straight.

#+begin_src emacs-lisp :exports none :tangle emacs-straight/straight.el
;;; straight.el --- ody55eus/emacs-straight-*- lexical-binding: t; -*-
;;
;; Copyright (C) 2021 Jonathan Pieper
;;
;; Author: Jonathan Pieper <https://github.com/jp>
;; Maintainer: Jonathan Pieper <ody55eus@mailbox.org>
;; Created: September 24, 2021
;; Modified: September 24, 2021
;; Version: 0.0.1
;; Keywords: abbrev bib c calendar comm convenience data docs emulations extensions faces files frames games hardware help hypermedia i18n internal languages lisp local maint mail matching mouse multimedia news outlines processes terminals tex tools unix vc wp
;; Homepage: https://github.com/jp/packages
;; Package-Requires: ((emacs "24.3"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:
;;
;;
;;
;;; Code:
#+end_src

*** Install Straight via Bootstrap
#+begin_src emacs-lisp :tangle emacs-straight/straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** Install Packages
#+begin_src emacs-lisp :tangle emacs-straight/straight.el :noweb yes
(straight-use-package 'org-roam)
(straight-use-package 'plantuml-mode)
(setq plantuml-jar-path "<<puml-file>>")
(unless (file-exists-p plantuml-jar-path)
  (plantuml-download-jar))
#+end_src

** Dockerfile
#+begin_src dockerfile :tangle emacs-straight/Dockerfile
# IMAGE: docker build . -t ody55eus/emacs-straight:latest
FROM ody55eus/publish
MAINTAINER Jonathan Pieper <jpieper@mailbox.org>

RUN mkdir -p /root/.emacs.d
COPY emacs-straight/straight.el /root/.emacs.d/init.el
RUN emacs --quick --script /root/.emacs.d/init.el
#+end_src

** GitLab CI/CD

#+begin_src yaml
img-emacs-straight:
  stage: emacs
  variables:
    CI_REGISTRY_IMAGE: ody55eus/emacs-straight
    CI_PATH: emacs-straight
  script:
    - docker build -t $CI_REGISTRY_IMAGE $CI_PATH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  resource_group: group-emacs
#+end_src

** GitHub Actions
This section in the [[file:.github/workflows/dockerimage.yaml][GitHub Actions YAML-Configuration]] asks GitHub to create and push the new docker container on every commit:

#+name:image-straight
#+begin_src conf :noweb yes :exports none
emacs-straight
#+end_src

#+begin_src yaml :noweb yes
  build-<<image-straight>>:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the <<image-straight>> Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/<<image-straight>>
        dockerfile: <<image-straight>>/Dockerfile
        tags: latest
#+end_src

* Publish
An image to publish documents via \LaTeX, pandoc, PlantUML, and Emacs.
** PlantUML
This Dockerfile installs PlantUML as ~.jar~ file inside ~/usr/local/bin/plantuml.jar~
#+NAME: puml-file
#+begin_src sh :exports none
/usr/local/bin/plantuml.jar
#+end_src

** Dockerfile
#+begin_src dockerfile :tangle publish/Dockerfile :noweb yes
# IMAGE: docker build . -t ody55eus/publish:latest
FROM python:3.9-bullseye
MAINTAINER Jonathan Pieper <ody55eus@mailbox.org>

# Install system packages
RUN apt-get update --fix-missing && apt-get upgrade -y && \
    apt-get install -y \
    curl git nodejs default-jre cabal-install \
    texlive-science texlive-latex-extra texlive-publishers \
    dvipng man-db cm-super graphviz emacs && \
    apt-get --purge remove -y .\*-doc$ && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install PlantUML
RUN curl -L http://sourceforge.net/projects/plantuml/files/plantuml.jar/download > <<puml-file>>

# Install Pandoc
# see <https://github.com/pandoc/dockerfiles/blob/master/ubuntu/Dockerfile#L33>
ARG pandoc_commit=master
RUN git clone --branch=$pandoc_commit --depth=1 --quiet \
  https://github.com/jgm/pandoc /usr/src/pandoc

# Install Haskell dependencies
COPY cabal.root.config /root/.cabal/config
RUN cabal --version \
  && ghc --version \
  && cabal new-update

WORKDIR /usr/src/pandoc
# Add pandoc-crossref to project
ARG without_crossref=
RUN test -n "$without_crossref" || \
    printf "extra-packages: pandoc-crossref\n" > cabal.project.local;

# Additional projects to compile alongside pandoc
ARG extra_packages="pandoc-crossref" # pandoc-citeproc

RUN cabal new-update \
  && cabal new-build \
      --disable-tests \
      --jobs \
      . $extra_packages

# Cabal's exec stripping doesn't seem to work reliably, let's do it here.
RUN find dist-newstyle \
         -name 'pandoc*' -type f -perm -u+x \
         -exec strip '{}' ';' \
         -exec cp '{}' /usr/local/bin/ ';'

WORKDIR /root
#+end_src

** GitLab CI/CD
#+begin_src yaml
img-publish:
  stage: emacs
  variables:
    CI_REGISTRY_IMAGE: ody55eus/publish
    CI_REGISTRY_PATH: publish
  script:
    - docker build -t $CI_REGISTRY_IMAGE $CI_REGISTRY_PATH
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  resource_group: group-emacs
#+end_src

** GitHub Actions
This section in the [[file:.github/workflows/dockerimage.yaml][GitHub Actions YAML-Configuration]] asks GitHub to create and push the new docker container on every commit:
#+name:image-name1
#+begin_src conf :noweb yes :exports none
publish
#+end_src

#+begin_src yaml :noweb yes
  build-<<image-name1>>:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the <<image-name1>> Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/<<image-name1>>
        dockerfile: <<image-name1>>/Dockerfile
        tags: latest
#+end_src

* Ana
This image contains Ana (Python Data Analysis Framework) and other software and data necessary to reproduce the results of my master thesis.
** Alpine Linux
  This [[file:ana/alpine/Dockerfile][Dockerfile]] is based on the latest Linux Alpine (=alpine:latest=) image. It is smaller and contains only the newest and barely necessary packages. This is the preferred image to analyze data.
*** Dockerfile
#+begin_src dockerfile :tangle ana/alpine/Dockerfile
# Python Analysis Docker Image
FROM alpine:latest
MAINTAINER Jonathan Pieper <ody55eus@mailbox.org>

ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

# Install system packages
RUN apk add --no-cache \
    curl git nodejs openssh-client make \
    libgfortran build-base hdf5-dev \
    texmf-dist-most texlive-xetex texlive-luatex \
    texlive-dvi texmf-dist-langextra \
    openjdk11-jre graphviz emacs \
    python3 py3-pip py3-scipy py3-pandas py3-matplotlib

# Make sure pdftex.map is available
# see https://gitlab.alpinelinux.org/alpine/aports/-/issues/12834
RUN mktexlsr && \
    updmap-sys --syncwithtrees && \
    fmtutil-sys --all

# add credentials to download extra software
ARG SSH_PRIVATE_KEY
RUN mkdir /root/.ssh/ && \
    echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa && \
    chmod 700 /root/.ssh && \
    chmod 600 /root/.ssh/id_rsa

# Trust my private GitLab server
RUN touch /root/.ssh/known_hosts && \
    ssh-keyscan -p 223 gitlab.ody5.de >> /root/.ssh/known_hosts

# Download and install analysis software and data
RUN mkdir /opt/lab-book && \
    git clone ssh://git@gitlab.ody5.de:223/agm/spectrumanalyzer.git /opt/lab-book/spectrumanalyzer && \
    git clone --recursive ssh://git@gitlab.ody5.de:223/agm/ana.git /opt/lab-book/ana && \
    git clone ssh://git@gitlab.ody5.de:223/agm/method-paper.git /root/Projects/Code/method-paper

# Remove private SSH Key so nobody can use it.
RUN rm /root/.ssh/id_rsa

# Install Python packages
RUN ln -s /usr/bin/python3 /usr/bin/python && \
    python -m pip install --upgrade pip && \
    python -m pip install --upgrade seaborn h5py plantuml && \
    python -m pip install git+https://github.com/garrettj403/SciencePlots.git

# Install Analysis modules
RUN cd /opt/lab-book/spectrumanalyzer && python -m pip install -e . && \
    cd /opt/lab-book/ana && python -m pip install -e .

# Remove unnecessary packages
RUN apk --no-cache del build-base

# Link Projects
RUN mkdir -p /root/Projects/Code && \
    ln -s /root/Projects/Code/method-paper /root/Projects/Method-Paper && \
    ln -s /opt/lab-book /root/Projects/Code/lab-book

WORKDIR /root

#+end_src

*** GitHub Actions
#+begin_src yaml
  build-ana:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the ana Docker image
      uses: docker/build-push-action@v1
      env:
        SSH_PRIVATE_KEY: ${{ secrects.SSH_PRIVATE_KEY }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/ana
        dockerfile: ana/alpine/Dockerfile
        tags: alpine
#+end_src

** Python 3.9 / Debian Bullseye (11.0)
  This [[file:ana/bullseye/Dockerfile][Dockerfile]] is based on the latest Debian Linux (=python:3.9-bullseye=) image. Debian provides older, but more stable packages.
***  Dockerfile
#+begin_src dockerfile :tangle ana/bullseye/Dockerfile
# Python Analysis Docker Image
FROM python:3.9-bullseye
MAINTAINER Jonathan Pieper <ody55eus@mailbox.org>

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

# Install system packages
RUN apt-get update --fix-missing && apt-get install -y \
    git nodejs default-jre \
    texlive texlive-science texlive-latex-extra texlive-xetex texlive-publishers \
    dvipng man-db cm-super graphviz emacs && \
    apt-get --purge remove -y .\*-doc$ && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# add credentials to download extra software
ARG SSH_PRIVATE_KEY
RUN mkdir /root/.ssh/ && \
    echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa && \
    chmod 700 /root/.ssh && \
    chmod 600 /root/.ssh/id_rsa

# Trust my private GitLab server
RUN touch /root/.ssh/known_hosts && \
    ssh-keyscan -p 223 gitlab.ody5.de >> /root/.ssh/known_hosts

# Download and install analysis software and data
RUN mkdir /opt/lab-book && \
    git clone ssh://git@gitlab.ody5.de:223/agm/spectrumanalyzer.git /opt/lab-book/spectrumanalyzer && \
    git clone --recursive ssh://git@gitlab.ody5.de:223/agm/ana.git /opt/lab-book/ana && \
    git clone ssh://git@gitlab.ody5.de:223/agm/method-paper.git /root/Projects/Code/method-paper

# Remove private SSH Key so nobody can use it.
RUN rm /root/.ssh/id_rsa

# Install Python packages
    RUN python -m pip install --upgrade pip && \
    python -m pip install --upgrade \
    numpy pandas scipy matplotlib seaborn h5py plantuml && \
    python -m pip install git+https://github.com/garrettj403/SciencePlots.git

# Install Analysis modules
RUN cd /opt/lab-book/spectrumanalyzer && python -m pip install -e . && \
    cd /opt/lab-book/ana && python -m pip install -e .

# Link Projects
RUN mkdir -p /root/Projects/Code && \
    ln -s /root/Projects/Code/method-paper /root/Projects/Method-Paper && \
    ln -s /opt/lab-book /root/Projects/Code/lab-book

WORKDIR /root

#+end_src

*** GitHub Actions
#+begin_src yaml
  build-ana-bullseye:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the ana bullseye Docker image
      uses: docker/build-push-action@v1
      env:
        SSH_PRIVATE_KEY: ${{ secrects.SSH_PRIVATE_KEY }}
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/ana
        dockerfile: ana/bullseye/Dockerfile
        tags: bullseye
#+end_src

* Evaluate
This [[file:evaluate/Dockerfile][Dockerfile]] installs Python and Anaconda on a plain Debian Linux image.
#+begin_src dockerfile :tangle evaluate/Dockerfile
# IMAGE: docker build . -t ody55eus/evaluate:base
FROM debian:latest

WORKDIR /root

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

RUN apt-get install -y curl grep sed dpkg && \
    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb && \
    apt-get clean

RUN conda create -n py37 -y python=3.7 \
      numpy pandas scipy matplotlib seaborn \
	  h5py pyarrow \
      notebook

WORKDIR /root


#+end_src

* Flowers
** Dockerfile
This [[file:flowers/Dockerfile][Dockerfile]] installs all software and images necessary to classify flowers. It contains images from two different Kaggle challenges designed to learn the features of flowers. It provides the base image for the flowers project.
#+begin_src dockerfile :tangle flowers/Dockerfile
# IMAGE: docker build . -t ody55eus/flowers
FROM python:3.7

WORKDIR /root

# Add Kaggle API
ADD kaggle.json /root/.kaggle/kaggle.json
RUN chmod 600 /root/.kaggle/kaggle.json

# Install Python Requirements
RUN python -m pip install --upgrade pip
RUN pip install pytest kaggle
RUN pip install keras-preprocessing numpy pandas scikit-learn scipy seaborn tensorboard tensorflow>=2.2 tensorflow-probability opencv-python pydot==1.2.3 jupyterlab
RUN pip install Pillow

# Create Data Directories
RUN mkdir data
RUN mkdir data/data1
RUN mkdir data/data2

# Download images from Kaggle
WORKDIR /root/data/data1
RUN kaggle datasets download mgornergoogle/five-flowers
RUN unzip five-flowers.zip && rm five-flowers.zip

WORKDIR /root/data/data2
RUN kaggle datasets download ianmoone0617/flower-goggle-tpu-classification
RUN unzip flower-goggle-tpu-classification.zip && rm flower-goggle-tpu-classification.zip

# Delete Kaggle API Key
RUN rm /root/.kaggle/kaggle.json

WORKDIR /root


#+end_src

** Github Actions
#+name:image-name2
#+begin_src conf :noweb yes
flowers
#+end_src

#+begin_src yaml :noweb yes
    build-<<image-name2>>:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: write kagglejson
      run: echo "$KAGGLEJSON" > kaggle.json
      env:
        KAGGLEJSON: ${{ secrets.KAGGLEJSON }}

    - name: Build the <<image-name2>> Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/<<image-name2>>
        dockerfile: <<image-name2>>/Dockerfile
        tags: latest
#+end_src

* Trajectory-Recognition
This [[file:trajectory-recognition/Dockerfile][Dockerfile]] installs Python and OpenCV together with pybgs to detect a background in a video. It provides the base image for the trajectory-recognition project published on GitLab.
#+begin_src dockerfile :tangle trajectory-recognition/Dockerfile
# IMAGE: docker build . -t ody55eus/trajecog:base
FROM debian:latest

WORKDIR /root

# Install dependencies
RUN apt update && apt upgrade && apt install -y \
    build-essential \
    cmake \
    pkg-config \
    wget \
    git \
    unzip \
    nano \
    curl \
	python3-pip \
    libopencv-dev \
    && apt-get autoclean && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN pip3 install numpy virtualenv opencv-python scikit-learn scikit-image
RUN pip3 install pybgs

WORKDIR /root


#+end_src

* License
  Copyright (C) 2021 Jonathan Pieper

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
