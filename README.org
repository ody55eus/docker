#+TITLE: Docker Files

This repository contains all my public Dockerfiles.
Each folder represents a different project.

* Table of Contents :TOC:
- [[#emacs-latest][Emacs-latest]]
  - [[#dockerfile][Dockerfile]]
  - [[#gitlab-cicd][GitLab CI/CD]]
  - [[#github-actions][GitHub Actions]]
- [[#evaluate][Evaluate]]
- [[#flowers][Flowers]]
  - [[#dockerfile-1][Dockerfile]]
  - [[#github-actions-1][Github Actions]]
- [[#trajectory-recognition][Trajectory-Recognition]]
- [[#license][License]]

* Emacs-latest
Installs the latest version of Emacs from git source code.
** Dockerfile
#+begin_src dockerfile :tangle emacs-latest/Dockerfile :mkdirp yes
# IMAGE: docker build . -t ody55eus/emacs-latest:latest
FROM debian:bookworm
MAINTAINER Jonathan Pieper <jpieper@mailbox.org>

RUN echo "deb-src http://deb.debian.org/debian bookworm main" >> /etc/apt/sources.list
RUN apt update --fix-missing && apt upgrade -y && apt install -y \
    curl git make nodejs default-jre python3-pip \
    texlive-science texlive-latex-extra texlive-publishers latexmk \
    dvipng man-db cm-super graphviz && \
    apt-get build-dep emacs -y && \
    apt-get --purge remove -y .\*-doc$ && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Download and install latest emacs
RUN git clone https://git.savannah.gnu.org/git/emacs.git
RUN cd emacs && ./autogen.sh && ./configure && \
    make && make install

WORKDIR /root
#+end_src

** GitLab CI/CD

#+begin_src yaml :tangle ./.gitlab-ci.yml :exports none
image: docker:stable
services:
- docker:dind
stages:
- emacs
- publish
- ana
variables:
  CI_REGISTRY_BASE: ${CI_REGISTRY}/${CI_PROJECT_PATH}
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#+end_src

#+begin_src yaml :tangle ./.gitlab-ci.yml
img-emacs-latest:
  stage: emacs
  variables:
    CI_REGISTRY_IMAGE: ${CI_REGISTRY_BASE}/emacs-latest
    CI_PATH: emacs-latest
  script:
    - docker build -t $CI_REGISTRY_IMAGE $CI_PATH
    - docker tag $CI_REGISTRY_IMAGE:latest $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  resource_group: group-emacs
#+end_src

** GitHub Actions
This section in the [[file:.github/workflows/dockerimage.yaml][GitHub Actions YAML-Configuration]] asks GitHub to create and push the new docker container on every commit:
#+begin_src yaml :tangle .github/workflows/dockerimage.yaml :exports none
name: Emacs-Latest Docker image

on:
  push:
    branches:
      - master

  schedule:
    # build every week
    - cron: "0 0 */7 * *"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
#+end_src

#+begin_src yaml :tangle .github/workflows/dockerimage.yaml :noweb yes
  build-emacs-latest:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Build the emacs-latest Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/emacs-latest
        dockerfile: emacs-latest/Dockerfile
        tags: latest
#+end_src

* Evaluate
This [[file:evaluate/Dockerfile][Dockerfile]] installs Python and Anaconda on a plain Debian Linux image.
#+begin_src dockerfile :tangle evaluate/Dockerfile
# IMAGE: docker build . -t ody55eus/evaluate:base
FROM debian:latest

WORKDIR /root

ENV LANG=C.UTF-8 LC_ALL=C.UTF-8
ENV PATH /opt/conda/bin:$PATH

RUN apt-get update --fix-missing && apt-get install -y wget bzip2 ca-certificates \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    git mercurial subversion

RUN wget --quiet https://repo.anaconda.com/archive/Anaconda3-5.3.0-Linux-x86_64.sh -O ~/anaconda.sh && \
    /bin/bash ~/anaconda.sh -b -p /opt/conda && \
    rm ~/anaconda.sh && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc

RUN apt-get install -y curl grep sed dpkg && \
    TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o "/v.*\"" | sed 's:^..\(.*\).$:\1:'` && \
    curl -L "https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb" > tini.deb && \
    dpkg -i tini.deb && \
    rm tini.deb && \
    apt-get clean

RUN conda create -n py37 -y python=3.7 \
      numpy pandas scipy matplotlib seaborn \
	  h5py pyarrow \
      notebook

WORKDIR /root
#+end_src

* Flowers
** Dockerfile
This [[file:flowers/Dockerfile][Dockerfile]] installs all software and images necessary to classify flowers. It contains images from two different Kaggle challenges designed to learn the features of flowers. It provides the base image for the flowers project.
#+begin_src dockerfile :tangle flowers/Dockerfile
# IMAGE: docker build . -t ody55eus/flowers
FROM python:3.7

WORKDIR /root

# Add Kaggle API
ADD kaggle.json /root/.kaggle/kaggle.json
RUN chmod 600 /root/.kaggle/kaggle.json

# Install Python Requirements
RUN python -m pip install --upgrade pip
RUN pip install pytest kaggle
RUN pip install keras-preprocessing numpy pandas scikit-learn scipy seaborn tensorboard tensorflow>=2.2 tensorflow-probability opencv-python pydot==1.2.3 jupyterlab
RUN pip install Pillow

# Create Data Directories
RUN mkdir data
RUN mkdir data/data1
RUN mkdir data/data2

# Download images from Kaggle
WORKDIR /root/data/data1
RUN kaggle datasets download mgornergoogle/five-flowers
RUN unzip five-flowers.zip && rm five-flowers.zip

WORKDIR /root/data/data2
RUN kaggle datasets download ianmoone0617/flower-goggle-tpu-classification
RUN unzip flower-goggle-tpu-classification.zip && rm flower-goggle-tpu-classification.zip

# Delete Kaggle API Key
RUN rm /root/.kaggle/kaggle.json

WORKDIR /root
#+end_src

** Github Actions
#+name:image-name2
#+begin_src conf :noweb yes
flowers
#+end_src

#+begin_src yaml :noweb yes
    build-<<image-name2>>:

    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: write kagglejson
      run: echo "$KAGGLEJSON" > kaggle.json
      env:
        KAGGLEJSON: ${{ secrets.KAGGLEJSON }}

    - name: Build the <<image-name2>> Docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ody55eus/<<image-name2>>
        dockerfile: <<image-name2>>/Dockerfile
        tags: latest
#+end_src

* Trajectory-Recognition
This [[file:trajectory-recognition/Dockerfile][Dockerfile]] installs Python and OpenCV together with pybgs to detect a background in a video. It provides the base image for the trajectory-recognition project published on GitLab.
#+begin_src dockerfile :tangle trajectory-recognition/Dockerfile
# IMAGE: docker build . -t ody55eus/trajecog:base
FROM debian:latest

WORKDIR /root

# Install dependencies
RUN apt update && apt upgrade && apt install -y \
    build-essential \
    cmake \
    pkg-config \
    wget \
    git \
    unzip \
    nano \
    curl \
	python3-pip \
    libopencv-dev \
    && apt-get autoclean && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN pip3 install numpy virtualenv opencv-python scikit-learn scikit-image
RUN pip3 install pybgs

WORKDIR /root
#+end_src

* License
  Copyright (C) 2021-2023 Jonathan Pieper

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation version 3.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
